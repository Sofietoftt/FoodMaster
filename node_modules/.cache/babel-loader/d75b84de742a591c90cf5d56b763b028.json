{"ast":null,"code":"// Open Source project from ...\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { polyfill } from 'react-lifecycles-compat'; //import { Text, View, LayoutAnimation, TouchableOpacity } from \"react-native\";\n\nimport styles from \"./Calendar.style.js\";\n\nclass CalendarDay extends Component {\n  // Reference: https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: props.selected,\n      ...this.calcSizes(props)\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let newState = {};\n    let doStateUpdate = false;\n    /* if (this.props.selected !== prevProps.selected) {\n       if (this.props.daySelectionAnimation.type !== \"\") {\n         let configurableAnimation = {\n           duration: this.props.daySelectionAnimation.duration || 300,\n           create: {\n             type:\n               this.props.daySelectionAnimation.animType ||\n               LayoutAnimation.Types.easeInEaseOut,\n             property:\n               this.props.daySelectionAnimation.animProperty ||\n               LayoutAnimation.Properties.opacity\n           },\n           update: {\n             type:\n               this.props.daySelectionAnimation.animUpdateType ||\n               LayoutAnimation.Types.easeInEaseOut,\n             springDamping: this.props.daySelectionAnimation.animSpringDamping\n           },\n           delete: {\n             type:\n               this.props.daySelectionAnimation.animType ||\n               LayoutAnimation.Types.easeInEaseOut,\n             property:\n               this.props.daySelectionAnimation.animProperty ||\n               LayoutAnimation.Properties.opacity\n           }\n           \n         };\n         LayoutAnimation.configureNext(configurableAnimation);\n       }\n       newState.selected = this.props.selected;\n       doStateUpdate = true;\n     }\n      if (prevProps.size !== this.props.size) {\n       newState = { ...newState, ...this.calcSizes(this.props) };\n       doStateUpdate = true;\n     }\n      if (doStateUpdate) {\n       this.setState(newState);\n     }\n     */\n  }\n\n  calcSizes(props) {\n    return {\n      containerSize: Math.round(props.size),\n      containerPadding: Math.round(props.size / 5),\n      containerBorderRadius: Math.round(props.size / 2),\n      dateNameFontSize: Math.round(props.size / 5),\n      dateNumberFontSize: Math.round(props.size / 2.9)\n    };\n  }\n\n  renderDots() {\n    if (!this.props.markedDates || this.props.markedDates.length === 0) {\n      return;\n    }\n\n    const marking = this.props.marking || {}; //const baseDotStyle = [styles.dot, styles.visibleDot];\n\n    const markedDatesStyle = this.props.markedDatesStyle || {}; //let validDots = <View style={[styles.dot]} />; // default empty view for no dots case\n\n    /*if (marking.dots && Array.isArray(marking.dots) && marking.dots.length > 0) {\n      // Filter out dots so that we we process only those items which have key and color property\n      validDots = marking.dots\n        .filter(d => (d && d.color))\n        .map((dot, index) => {\n        return (\n          <View\n            key={dot.key ? dot.key : index}\n            style={[\n              baseDotStyle,\n              { backgroundColor: marking.selected && dot.selectedDotColor ? dot.selectedDotColor : dot.color },\n              markedDatesStyle\n            ]}\n          />\n        );\n      });\n    }\n    \n     return (\n      <View style={styles.dotsContainer}>\n        {validDots}\n      </View>\n    );\n     */\n  }\n\n  render() {\n    // Defaults for disabled state\n    let dateNameStyle = [styles.dateName, this.props.enabled ? this.props.dateNameStyle : this.props.disabledDateNameStyle];\n    let dateNumberStyle = [styles.dateNumber, this.props.enabled ? this.props.dateNumberStyle : this.props.disabledDateNumberStyle];\n    let dateViewStyle = this.props.enabled ? [{\n      backgroundColor: \"transparent\"\n    }] : [{\n      opacity: this.props.disabledDateOpacity\n    }];\n    let customStyle = this.props.customStyle;\n\n    if (customStyle) {\n      dateNameStyle.push(customStyle.dateNameStyle);\n      dateNumberStyle.push(customStyle.dateNumberStyle);\n      dateViewStyle.push(customStyle.dateContainerStyle);\n    }\n\n    if (this.props.enabled && this.state.selected) {\n      // Enabled state\n      //The user can disable animation, so that is why I use selection type\n      //If it is background, the user have to input colors for animation\n      //If it is border, the user has to input color for border animation\n      switch (this.props.daySelectionAnimation.type) {\n        case \"background\":\n          dateViewStyle.push({\n            backgroundColor: this.props.daySelectionAnimation.highlightColor\n          });\n          break;\n\n        case \"border\":\n          dateViewStyle.push({\n            borderColor: this.props.daySelectionAnimation.borderHighlightColor,\n            borderWidth: this.props.daySelectionAnimation.borderWidth\n          });\n          break;\n\n        default:\n          // No animation styling by default\n          break;\n      }\n\n      dateNameStyle = [styles.dateName, this.props.dateNameStyle];\n      dateNumberStyle = [styles.dateNumber, this.props.dateNumberStyle];\n\n      if (this.props.styleWeekend && (this.props.date.isoWeekday() === 6 || this.props.date.isoWeekday() === 7)) {\n        dateNameStyle = [styles.weekendDateName, this.props.weekendDateNameStyle];\n        dateNumberStyle = [styles.weekendDateNumber, this.props.weekendDateNumberStyle];\n      }\n\n      if (this.state.selected) {\n        dateNameStyle = [styles.dateName, this.props.highlightDateNameStyle];\n        dateNumberStyle = [styles.dateNumber, this.props.highlightDateNumberStyle];\n      }\n    }\n\n    let responsiveDateContainerStyle = {\n      width: this.state.containerSize,\n      height: this.state.containerSize,\n      borderRadius: this.state.containerBorderRadius,\n      padding: this.state.containerPadding\n    };\n    /*\n        return (\n          <TouchableOpacity\n            onPress={this.props.onDateSelected.bind(this, this.props.date)}\n          >\n            <View\n              key={this.props.date}\n              style={[\n                styles.dateContainer,\n                responsiveDateContainerStyle,\n                dateViewStyle\n              ]}\n            >\n              {this.props.showDayName && (\n                <Text\n                  style={[{ fontSize: this.state.dateNameFontSize }, dateNameStyle]}\n                  allowFontScaling={this.props.allowDayTextScaling}\n                >\n                  {this.props.date.format(\"ddd\").toUpperCase()}\n                </Text>\n              )}\n              {this.props.showDayNumber && (\n                <View>\n                  <Text\n                    style={[\n                        { fontSize: this.state.dateNumberFontSize },\n                        dateNumberStyle\n                    ]}\n                    allowFontScaling={this.props.allowDayTextScaling}\n                  >\n                    {this.props.date.date()}\n                  </Text>\n                  { this.renderDots() }\n                </View>\n              )}\n            </View>\n          </TouchableOpacity>\n        );\n        */\n  }\n\n}\n\nCalendarDay.propTypes = {\n  date: PropTypes.object.isRequired,\n  onDateSelected: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  marking: PropTypes.any,\n  markedDates: PropTypes.array,\n  showDayName: PropTypes.bool,\n  showDayNumber: PropTypes.bool,\n  calendarColor: PropTypes.string,\n  dateNameStyle: PropTypes.any,\n  dateNumberStyle: PropTypes.any,\n  weekendDateNameStyle: PropTypes.any,\n  weekendDateNumberStyle: PropTypes.any,\n  highlightDateNameStyle: PropTypes.any,\n  highlightDateNumberStyle: PropTypes.any,\n  disabledDateNameStyle: PropTypes.any,\n  disabledDateNumberStyle: PropTypes.any,\n  markedDatesStyle: PropTypes.object,\n  disabledDateOpacity: PropTypes.number,\n  styleWeekend: PropTypes.bool,\n  customStyle: PropTypes.object,\n  daySelectionAnimation: PropTypes.object,\n  allowDayTextScaling: PropTypes.bool\n};\nCalendarDay.defaultProps = {\n  daySelectionAnimation: {\n    type: \"\",\n    // animations disabled by default\n    duration: 300,\n    borderWidth: 1,\n    borderHighlightColor: \"black\",\n    highlightColor: \"yellow\",\n    //animType: LayoutAnimation.Types.easeInEaseOut,\n    //animUpdateType: LayoutAnimation.Types.easeInEaseOut,\n    //animProperty: LayoutAnimation.Properties.opacity,\n    animSpringDamping: undefined // Only applicable for LayoutAnimation.Types.spring,\n\n  },\n  styleWeekend: true,\n  showDayName: true,\n  showDayNumber: true\n};\npolyfill(CalendarDay);\nexport default CalendarDay;","map":{"version":3,"sources":["/Users/tuvace/Desktop/FoodMaster/src/CalendarDay.js"],"names":["React","Component","PropTypes","polyfill","styles","CalendarDay","constructor","props","state","selected","calcSizes","componentDidUpdate","prevProps","prevState","newState","doStateUpdate","containerSize","Math","round","size","containerPadding","containerBorderRadius","dateNameFontSize","dateNumberFontSize","renderDots","markedDates","length","marking","markedDatesStyle","render","dateNameStyle","dateName","enabled","disabledDateNameStyle","dateNumberStyle","dateNumber","disabledDateNumberStyle","dateViewStyle","backgroundColor","opacity","disabledDateOpacity","customStyle","push","dateContainerStyle","daySelectionAnimation","type","highlightColor","borderColor","borderHighlightColor","borderWidth","styleWeekend","date","isoWeekday","weekendDateName","weekendDateNameStyle","weekendDateNumber","weekendDateNumberStyle","highlightDateNameStyle","highlightDateNumberStyle","responsiveDateContainerStyle","width","height","borderRadius","padding","propTypes","object","isRequired","onDateSelected","func","bool","any","array","showDayName","showDayNumber","calendarColor","string","number","allowDayTextScaling","defaultProps","duration","animSpringDamping","undefined"],"mappings":"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","sourcesContent":["// Open Source project from ...\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {polyfill} from 'react-lifecycles-compat';\n\n//import { Text, View, LayoutAnimation, TouchableOpacity } from \"react-native\";\nimport styles from \"./Calendar.style.js\";\n\nclass CalendarDay extends Component {\n  static propTypes = {\n    date: PropTypes.object.isRequired,\n    onDateSelected: PropTypes.func.isRequired,\n    selected: PropTypes.bool.isRequired,\n    enabled: PropTypes.bool.isRequired,\n\n    marking: PropTypes.any,\n    markedDates: PropTypes.array,\n\n    showDayName: PropTypes.bool,\n    showDayNumber: PropTypes.bool,\n\n    calendarColor: PropTypes.string,\n\n    dateNameStyle: PropTypes.any,\n    dateNumberStyle: PropTypes.any,\n    weekendDateNameStyle: PropTypes.any,\n    weekendDateNumberStyle: PropTypes.any,\n    highlightDateNameStyle: PropTypes.any,\n    highlightDateNumberStyle: PropTypes.any,\n    disabledDateNameStyle: PropTypes.any,\n    disabledDateNumberStyle: PropTypes.any,\n    markedDatesStyle: PropTypes.object,\n    disabledDateOpacity: PropTypes.number,\n    styleWeekend: PropTypes.bool,\n    customStyle: PropTypes.object,\n\n    daySelectionAnimation: PropTypes.object,\n    allowDayTextScaling: PropTypes.bool\n  };\n\n  // Reference: https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e\n  static defaultProps = {\n    daySelectionAnimation: {\n      type: \"\", // animations disabled by default\n      duration: 300,\n      borderWidth: 1,\n      borderHighlightColor: \"black\",\n      highlightColor: \"yellow\",\n      //animType: LayoutAnimation.Types.easeInEaseOut,\n      //animUpdateType: LayoutAnimation.Types.easeInEaseOut,\n      //animProperty: LayoutAnimation.Properties.opacity,\n      animSpringDamping: undefined // Only applicable for LayoutAnimation.Types.spring,\n    },\n    styleWeekend: true,\n    showDayName: true,\n    showDayNumber: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: props.selected,\n      ...this.calcSizes(props)\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let newState = {};\n    let doStateUpdate = false;\n\n   /* if (this.props.selected !== prevProps.selected) {\n      if (this.props.daySelectionAnimation.type !== \"\") {\n        let configurableAnimation = {\n          duration: this.props.daySelectionAnimation.duration || 300,\n          create: {\n            type:\n              this.props.daySelectionAnimation.animType ||\n              LayoutAnimation.Types.easeInEaseOut,\n            property:\n              this.props.daySelectionAnimation.animProperty ||\n              LayoutAnimation.Properties.opacity\n          },\n          update: {\n            type:\n              this.props.daySelectionAnimation.animUpdateType ||\n              LayoutAnimation.Types.easeInEaseOut,\n            springDamping: this.props.daySelectionAnimation.animSpringDamping\n          },\n          delete: {\n            type:\n              this.props.daySelectionAnimation.animType ||\n              LayoutAnimation.Types.easeInEaseOut,\n            property:\n              this.props.daySelectionAnimation.animProperty ||\n              LayoutAnimation.Properties.opacity\n          }\n          \n        };\n        LayoutAnimation.configureNext(configurableAnimation);\n      }\n      newState.selected = this.props.selected;\n      doStateUpdate = true;\n    }\n\n    if (prevProps.size !== this.props.size) {\n      newState = { ...newState, ...this.calcSizes(this.props) };\n      doStateUpdate = true;\n    }\n\n    if (doStateUpdate) {\n      this.setState(newState);\n    }\n    */\n  }\n\n  calcSizes(props) {\n    return {\n      containerSize: Math.round(props.size),\n      containerPadding: Math.round(props.size / 5),\n      containerBorderRadius: Math.round(props.size / 2),\n      dateNameFontSize: Math.round(props.size / 5),\n      dateNumberFontSize: Math.round(props.size / 2.9)\n    };\n  }\n\n  renderDots() {\n    if (!this.props.markedDates || this.props.markedDates.length === 0) {\n      return;\n    }\n    const marking = this.props.marking || {};\n    //const baseDotStyle = [styles.dot, styles.visibleDot];\n    const markedDatesStyle = this.props.markedDatesStyle || {};\n    //let validDots = <View style={[styles.dot]} />; // default empty view for no dots case\n\n    /*if (marking.dots && Array.isArray(marking.dots) && marking.dots.length > 0) {\n      // Filter out dots so that we we process only those items which have key and color property\n      validDots = marking.dots\n        .filter(d => (d && d.color))\n        .map((dot, index) => {\n        return (\n          <View\n            key={dot.key ? dot.key : index}\n            style={[\n              baseDotStyle,\n              { backgroundColor: marking.selected && dot.selectedDotColor ? dot.selectedDotColor : dot.color },\n              markedDatesStyle\n            ]}\n          />\n        );\n      });\n    }\n    \n\n    return (\n      <View style={styles.dotsContainer}>\n        {validDots}\n      </View>\n    );\n\n    */\n  }\n  \n\n  render() {\n    // Defaults for disabled state\n    let dateNameStyle = [styles.dateName, this.props.enabled ? this.props.dateNameStyle : this.props.disabledDateNameStyle];\n    let dateNumberStyle = [styles.dateNumber, this.props.enabled ? this.props.dateNumberStyle : this.props.disabledDateNumberStyle];\n    let dateViewStyle = this.props.enabled\n      ? [{ backgroundColor: \"transparent\" }]\n      : [{ opacity: this.props.disabledDateOpacity }];\n\n    let customStyle = this.props.customStyle;\n    if (customStyle) {\n      dateNameStyle.push(customStyle.dateNameStyle);\n      dateNumberStyle.push(customStyle.dateNumberStyle);\n      dateViewStyle.push(customStyle.dateContainerStyle);\n    }\n    if (this.props.enabled && this.state.selected) {\n      // Enabled state\n      //The user can disable animation, so that is why I use selection type\n      //If it is background, the user have to input colors for animation\n      //If it is border, the user has to input color for border animation\n      switch (this.props.daySelectionAnimation.type) {\n        case \"background\":\n          dateViewStyle.push({ backgroundColor: this.props.daySelectionAnimation.highlightColor });\n          break;\n        case \"border\":\n          dateViewStyle.push({\n            borderColor: this.props.daySelectionAnimation.borderHighlightColor,\n            borderWidth: this.props.daySelectionAnimation.borderWidth\n          });\n          break;\n        default:\n          // No animation styling by default\n          break;\n      }\n\n      dateNameStyle = [styles.dateName, this.props.dateNameStyle];\n      dateNumberStyle = [styles.dateNumber, this.props.dateNumberStyle];\n      if (\n        this.props.styleWeekend &&\n        (this.props.date.isoWeekday() === 6 ||\n          this.props.date.isoWeekday() === 7)\n      ) {\n        dateNameStyle = [\n          styles.weekendDateName,\n          this.props.weekendDateNameStyle\n        ];\n        dateNumberStyle = [\n          styles.weekendDateNumber,\n          this.props.weekendDateNumberStyle\n        ];\n      }\n      if (this.state.selected) {\n        dateNameStyle = [styles.dateName, this.props.highlightDateNameStyle];\n        dateNumberStyle = [\n          styles.dateNumber,\n          this.props.highlightDateNumberStyle\n        ];\n      }\n    }\n\n    let responsiveDateContainerStyle = {\n      width: this.state.containerSize,\n      height: this.state.containerSize,\n      borderRadius: this.state.containerBorderRadius,\n      padding: this.state.containerPadding\n    };\n\n/*\n    return (\n      <TouchableOpacity\n        onPress={this.props.onDateSelected.bind(this, this.props.date)}\n      >\n        <View\n          key={this.props.date}\n          style={[\n            styles.dateContainer,\n            responsiveDateContainerStyle,\n            dateViewStyle\n          ]}\n        >\n          {this.props.showDayName && (\n            <Text\n              style={[{ fontSize: this.state.dateNameFontSize }, dateNameStyle]}\n              allowFontScaling={this.props.allowDayTextScaling}\n            >\n              {this.props.date.format(\"ddd\").toUpperCase()}\n            </Text>\n          )}\n          {this.props.showDayNumber && (\n            <View>\n              <Text\n                style={[\n                    { fontSize: this.state.dateNumberFontSize },\n                    dateNumberStyle\n                ]}\n                allowFontScaling={this.props.allowDayTextScaling}\n              >\n                {this.props.date.date()}\n              </Text>\n              { this.renderDots() }\n            </View>\n          )}\n        </View>\n      </TouchableOpacity>\n    );\n    */\n  }\n}\n\npolyfill(CalendarDay);\n\nexport default CalendarDay;"]},"metadata":{},"sourceType":"module"}